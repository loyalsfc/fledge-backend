// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const changeCoverPicture = `-- name: ChangeCoverPicture :one
UPDATE users
set cover_picture = $2
WHERE username = $1
RETURNING id, name, username, email, password, bio, profession, is_verified, is_active, profile_picture, cover_picture, created_at, updated_at
`

type ChangeCoverPictureParams struct {
	Username     string
	CoverPicture sql.NullString
}

func (q *Queries) ChangeCoverPicture(ctx context.Context, arg ChangeCoverPictureParams) (User, error) {
	row := q.db.QueryRowContext(ctx, changeCoverPicture, arg.Username, arg.CoverPicture)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Profession,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePicture,
		&i.CoverPicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const changeProfilePicture = `-- name: ChangeProfilePicture :one
UPDATE users
set profile_picture = $2
WHERE username = $1
RETURNING id, name, username, email, password, bio, profession, is_verified, is_active, profile_picture, cover_picture, created_at, updated_at
`

type ChangeProfilePictureParams struct {
	Username       string
	ProfilePicture sql.NullString
}

func (q *Queries) ChangeProfilePicture(ctx context.Context, arg ChangeProfilePictureParams) (User, error) {
	row := q.db.QueryRowContext(ctx, changeProfilePicture, arg.Username, arg.ProfilePicture)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Profession,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePicture,
		&i.CoverPicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    id, name, email, username, password, cover_picture, profile_picture
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, username, email, password, bio, profession, is_verified, is_active, profile_picture, cover_picture, created_at, updated_at
`

type CreateUserParams struct {
	ID             uuid.UUID
	Name           string
	Email          string
	Username       string
	Password       string
	CoverPicture   sql.NullString
	ProfilePicture sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.Password,
		arg.CoverPicture,
		arg.ProfilePicture,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Profession,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePicture,
		&i.CoverPicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, username, email, password, bio, profession, is_verified, is_active, profile_picture, cover_picture, created_at, updated_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Profession,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePicture,
		&i.CoverPicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, username, email, password, bio, profession, is_verified, is_active, profile_picture, cover_picture, created_at, updated_at FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Bio,
			&i.Profession,
			&i.IsVerified,
			&i.IsActive,
			&i.ProfilePicture,
			&i.CoverPicture,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const signIn = `-- name: SignIn :one
SELECT id, name, username, email, password, bio, profession, is_verified, is_active, profile_picture, cover_picture, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) SignIn(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, signIn, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Profession,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePicture,
		&i.CoverPicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
    set name = $2,
    bio = $3,
    profession = $4
WHERE username = $1
RETURNING id, name, username, email, password, bio, profession, is_verified, is_active, profile_picture, cover_picture, created_at, updated_at
`

type UpdateUserProfileParams struct {
	Username   string
	Name       string
	Bio        sql.NullString
	Profession sql.NullString
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile,
		arg.Username,
		arg.Name,
		arg.Bio,
		arg.Profession,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Profession,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePicture,
		&i.CoverPicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
