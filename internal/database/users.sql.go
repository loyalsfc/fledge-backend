// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (
    id, name, email, username, password
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, name, username, email, password, bio, profession, is_verified, is_active, profile_picture, cover_picture, created_at, updated_at
`

type CreateUserParams struct {
	ID       uuid.UUID
	Name     string
	Email    string
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Username,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Profession,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePicture,
		&i.CoverPicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :many
SELECT id, name, username, email, password, bio, profession, is_verified, is_active, profile_picture, cover_picture, created_at, updated_at FROM users
`

func (q *Queries) GetUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Bio,
			&i.Profession,
			&i.IsVerified,
			&i.IsActive,
			&i.ProfilePicture,
			&i.CoverPicture,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const signIn = `-- name: SignIn :one
SELECT id, name, username, email, password, bio, profession, is_verified, is_active, profile_picture, cover_picture, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) SignIn(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, signIn, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Bio,
		&i.Profession,
		&i.IsVerified,
		&i.IsActive,
		&i.ProfilePicture,
		&i.CoverPicture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
