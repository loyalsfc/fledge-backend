// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notifications.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getUserNotifications = `-- name: GetUserNotifications :many
SELECT n.id, n.sender_username, n.receiver_username, n.content, n.created_at, n.is_viewed, n.notifications_source, n.reference, u.name, u.profile_picture, u.is_verified
FROM notifications n
INNER JOIN users u ON n.sender_username = u.username
WHERE n.receiver_username = $1
ORDER BY n.created_at DESC
`

type GetUserNotificationsRow struct {
	ID                  uuid.UUID
	SenderUsername      string
	ReceiverUsername    string
	Content             string
	CreatedAt           time.Time
	IsViewed            bool
	NotificationsSource string
	Reference           string
	Name                string
	ProfilePicture      sql.NullString
	IsVerified          sql.NullBool
}

func (q *Queries) GetUserNotifications(ctx context.Context, receiverUsername string) ([]GetUserNotificationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserNotifications, receiverUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserNotificationsRow
	for rows.Next() {
		var i GetUserNotificationsRow
		if err := rows.Scan(
			&i.ID,
			&i.SenderUsername,
			&i.ReceiverUsername,
			&i.Content,
			&i.CreatedAt,
			&i.IsViewed,
			&i.NotificationsSource,
			&i.Reference,
			&i.Name,
			&i.ProfilePicture,
			&i.IsVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNotification = `-- name: InsertNotification :exec
INSERT INTO notifications (
    id, sender_username, receiver_username, content, notifications_source, reference
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type InsertNotificationParams struct {
	ID                  uuid.UUID
	SenderUsername      string
	ReceiverUsername    string
	Content             string
	NotificationsSource string
	Reference           string
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) error {
	_, err := q.db.ExecContext(ctx, insertNotification,
		arg.ID,
		arg.SenderUsername,
		arg.ReceiverUsername,
		arg.Content,
		arg.NotificationsSource,
		arg.Reference,
	)
	return err
}

const removeNotification = `-- name: RemoveNotification :exec
DELETE FROM notifications
WHERE sender_username = $1 AND reference = $2
`

type RemoveNotificationParams struct {
	SenderUsername string
	Reference      string
}

func (q *Queries) RemoveNotification(ctx context.Context, arg RemoveNotificationParams) error {
	_, err := q.db.ExecContext(ctx, removeNotification, arg.SenderUsername, arg.Reference)
	return err
}
