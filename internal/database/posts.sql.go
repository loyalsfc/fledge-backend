// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const decreaseShareCount = `-- name: DecreaseShareCount :one
UPDATE posts
    SET share_count = share_count - 1
WHERE id = $1
RETURNING share_count
`

func (q *Queries) DecreaseShareCount(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, decreaseShareCount, id)
	var share_count int32
	err := row.Scan(&share_count)
	return share_count, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const editPost = `-- name: EditPost :exec
UPDATE posts
    SET content = $1,
    media = $2,
    updated_at = now()
WHERE id = $3
`

type EditPostParams struct {
	Content string
	Media   json.RawMessage
	ID      uuid.UUID
}

func (q *Queries) EditPost(ctx context.Context, arg EditPostParams) error {
	_, err := q.db.ExecContext(ctx, editPost, arg.Content, arg.Media, arg.ID)
	return err
}

const getBookmarkedPosts = `-- name: GetBookmarkedPosts :many
SELECT p.id, p.user_id, p.content, p.media, p.username, p.created_at, p.updated_at, p.likes_count, p.comment_count, p.bookmarks_count, p.share_count, p.is_shared_post, p.shared_post_id, u.name, u.profile_picture, u.is_verified,
    array_agg(l.username) AS liked_users_username,
    array_agg(b.username) AS bookmarked_users_username
FROM posts p
INNER JOIN users u ON p.user_id = u.id
LEFT JOIN likes l ON p.id = l.post_id
INNER JOIN bookmarks b ON p.id = b.post_id
WHERE b.username = $1
GROUP BY p.id, p.user_id, p.content, p.media, p.username, p.created_at, p.updated_at, p.likes_count, p.comment_count, p.bookmarks_count, p.share_count, p.is_shared_post, p.shared_post_id, u.name, u.profile_picture, u.is_verified
`

type GetBookmarkedPostsRow struct {
	ID                      uuid.UUID
	UserID                  uuid.UUID
	Content                 string
	Media                   json.RawMessage
	Username                string
	CreatedAt               time.Time
	UpdatedAt               time.Time
	LikesCount              int32
	CommentCount            int32
	BookmarksCount          int32
	ShareCount              int32
	IsSharedPost            bool
	SharedPostID            uuid.NullUUID
	Name                    string
	ProfilePicture          sql.NullString
	IsVerified              sql.NullBool
	LikedUsersUsername      interface{}
	BookmarkedUsersUsername interface{}
}

func (q *Queries) GetBookmarkedPosts(ctx context.Context, username string) ([]GetBookmarkedPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBookmarkedPosts, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBookmarkedPostsRow
	for rows.Next() {
		var i GetBookmarkedPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.Media,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
			&i.CommentCount,
			&i.BookmarksCount,
			&i.ShareCount,
			&i.IsSharedPost,
			&i.SharedPostID,
			&i.Name,
			&i.ProfilePicture,
			&i.IsVerified,
			&i.LikedUsersUsername,
			&i.BookmarkedUsersUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedPosts = `-- name: GetFeedPosts :many
SELECT p.id, p.user_id, p.content, p.media, p.username, p.created_at, p.updated_at, p.likes_count, p.comment_count, p.bookmarks_count, p.share_count, p.is_shared_post, p.shared_post_id, u.name, u.profile_picture, u.is_verified,
    array_agg(l.username) AS liked_users_username,
    array_agg(b.username) AS bookmarked_users_username
FROM posts p
INNER JOIN users u ON p.user_id = u.id
LEFT JOIN likes l ON p.id = l.post_id
LEFT JOIN bookmarks b ON p.id = b.post_id
LEFT JOIN followers f ON p.user_id = f.following_id
WHERE f.follower_id = $1 OR p.user_id = $1
GROUP BY p.id, p.user_id, p.content, p.media, p.username, p.created_at, p.updated_at, p.likes_count, p.comment_count, p.bookmarks_count, p.share_count, p.is_shared_post, p.shared_post_id, u.name, u.profile_picture, u.is_verified
ORDER BY p.created_at DESC
`

type GetFeedPostsRow struct {
	ID                      uuid.UUID
	UserID                  uuid.UUID
	Content                 string
	Media                   json.RawMessage
	Username                string
	CreatedAt               time.Time
	UpdatedAt               time.Time
	LikesCount              int32
	CommentCount            int32
	BookmarksCount          int32
	ShareCount              int32
	IsSharedPost            bool
	SharedPostID            uuid.NullUUID
	Name                    string
	ProfilePicture          sql.NullString
	IsVerified              sql.NullBool
	LikedUsersUsername      interface{}
	BookmarkedUsersUsername interface{}
}

func (q *Queries) GetFeedPosts(ctx context.Context, followerID uuid.UUID) ([]GetFeedPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedPosts, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedPostsRow
	for rows.Next() {
		var i GetFeedPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.Media,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
			&i.CommentCount,
			&i.BookmarksCount,
			&i.ShareCount,
			&i.IsSharedPost,
			&i.SharedPostID,
			&i.Name,
			&i.ProfilePicture,
			&i.IsVerified,
			&i.LikedUsersUsername,
			&i.BookmarkedUsersUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT p.id, p.user_id, p.content, p.media, p.username, p.created_at, p.updated_at, p.likes_count, p.comment_count, p.bookmarks_count, p.share_count, p.is_shared_post, p.shared_post_id, u.name, u.profile_picture, u.is_verified,
    array_agg(l.username) AS liked_users_username,
	array_agg(b.username) AS bookmarked_users_username
FROM posts p
INNER JOIN users u ON p.user_id = u.id
LEFT JOIN likes l ON p.id = l.post_id
LEFT JOIN bookmarks b ON p.id = b.post_id
WHERE p.id = $1
GROUP BY p.id, p.user_id, p.content, p.media, p.username, p.created_at, p.updated_at, p.likes_count, p.comment_count, p.bookmarks_count, p.share_count, p.is_shared_post, p.shared_post_id, u.name, u.profile_picture, u.is_verified
ORDER BY p.created_at DESC
`

type GetPostRow struct {
	ID                      uuid.UUID
	UserID                  uuid.UUID
	Content                 string
	Media                   json.RawMessage
	Username                string
	CreatedAt               time.Time
	UpdatedAt               time.Time
	LikesCount              int32
	CommentCount            int32
	BookmarksCount          int32
	ShareCount              int32
	IsSharedPost            bool
	SharedPostID            uuid.NullUUID
	Name                    string
	ProfilePicture          sql.NullString
	IsVerified              sql.NullBool
	LikedUsersUsername      interface{}
	BookmarkedUsersUsername interface{}
}

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (GetPostRow, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.Media,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LikesCount,
		&i.CommentCount,
		&i.BookmarksCount,
		&i.ShareCount,
		&i.IsSharedPost,
		&i.SharedPostID,
		&i.Name,
		&i.ProfilePicture,
		&i.IsVerified,
		&i.LikedUsersUsername,
		&i.BookmarkedUsersUsername,
	)
	return i, err
}

const getUserPosts = `-- name: GetUserPosts :many
SELECT p.id, p.user_id, p.content, p.media, p.username, p.created_at, p.updated_at, p.likes_count, p.comment_count, p.bookmarks_count, p.share_count, p.is_shared_post, p.shared_post_id, u.name, u.profile_picture, u.is_verified,
    array_agg(l.username) AS liked_users_username,
    array_agg(b.username) AS bookmarked_users_username
FROM posts p
INNER JOIN users u ON p.user_id = u.id
LEFT JOIN likes l ON p.id = l.post_id
LEFT JOIN bookmarks b ON p.id = b.post_id
WHERE p.username = $1
GROUP BY p.id, p.user_id, p.content, p.media, p.username, p.created_at, p.updated_at, p.likes_count, p.comment_count, p.bookmarks_count, p.share_count, p.is_shared_post, p.shared_post_id, u.name, u.profile_picture, u.is_verified
ORDER BY p.created_at DESC
`

type GetUserPostsRow struct {
	ID                      uuid.UUID
	UserID                  uuid.UUID
	Content                 string
	Media                   json.RawMessage
	Username                string
	CreatedAt               time.Time
	UpdatedAt               time.Time
	LikesCount              int32
	CommentCount            int32
	BookmarksCount          int32
	ShareCount              int32
	IsSharedPost            bool
	SharedPostID            uuid.NullUUID
	Name                    string
	ProfilePicture          sql.NullString
	IsVerified              sql.NullBool
	LikedUsersUsername      interface{}
	BookmarkedUsersUsername interface{}
}

func (q *Queries) GetUserPosts(ctx context.Context, username string) ([]GetUserPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPosts, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPostsRow
	for rows.Next() {
		var i GetUserPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.Media,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
			&i.CommentCount,
			&i.BookmarksCount,
			&i.ShareCount,
			&i.IsSharedPost,
			&i.SharedPostID,
			&i.Name,
			&i.ProfilePicture,
			&i.IsVerified,
			&i.LikedUsersUsername,
			&i.BookmarkedUsersUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const increaseShareCount = `-- name: IncreaseShareCount :one
UPDATE posts
    SET share_count = share_count + 1
WHERE id = $1
RETURNING share_count
`

func (q *Queries) IncreaseShareCount(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, increaseShareCount, id)
	var share_count int32
	err := row.Scan(&share_count)
	return share_count, err
}

const newPost = `-- name: NewPost :one

INSERT INTO posts (
    id, user_id, username, content, media, created_at, updated_at, is_shared_post, shared_post_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id
`

type NewPostParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	Username     string
	Content      string
	Media        json.RawMessage
	CreatedAt    time.Time
	UpdatedAt    time.Time
	IsSharedPost bool
	SharedPostID uuid.NullUUID
}

func (q *Queries) NewPost(ctx context.Context, arg NewPostParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, newPost,
		arg.ID,
		arg.UserID,
		arg.Username,
		arg.Content,
		arg.Media,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsSharedPost,
		arg.SharedPostID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
