// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const getPost = `-- name: GetPost :one
SELECT p.id, p.user_id, p.content, p.media, p.username, p.created_at, p.updated_at, p.likes_count, p.comment_count, p.bookmarks_count, p.share_count, u.name, u.profile_picture, u.is_verified
FROM posts p
INNER JOIN users u ON p.user_id = u.id
WHERE p.id = $1 LIMIT 1
`

type GetPostRow struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	Content        string
	Media          json.RawMessage
	Username       string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	LikesCount     int32
	CommentCount   int32
	BookmarksCount int32
	ShareCount     int32
	Name           string
	ProfilePicture sql.NullString
	IsVerified     sql.NullBool
}

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (GetPostRow, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.Media,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LikesCount,
		&i.CommentCount,
		&i.BookmarksCount,
		&i.ShareCount,
		&i.Name,
		&i.ProfilePicture,
		&i.IsVerified,
	)
	return i, err
}

const getUserPosts = `-- name: GetUserPosts :many
SELECT p.id, p.user_id, p.content, p.media, p.username, p.created_at, p.updated_at, p.likes_count, p.comment_count, p.bookmarks_count, p.share_count, u.name, u.profile_picture, u.is_verified
FROM posts p
INNER JOIN users u ON p.user_id = u.id
WHERE u.username = $1
ORDER BY p.created_at DESC
`

type GetUserPostsRow struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	Content        string
	Media          json.RawMessage
	Username       string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	LikesCount     int32
	CommentCount   int32
	BookmarksCount int32
	ShareCount     int32
	Name           string
	ProfilePicture sql.NullString
	IsVerified     sql.NullBool
}

func (q *Queries) GetUserPosts(ctx context.Context, username string) ([]GetUserPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPosts, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPostsRow
	for rows.Next() {
		var i GetUserPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.Media,
			&i.Username,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LikesCount,
			&i.CommentCount,
			&i.BookmarksCount,
			&i.ShareCount,
			&i.Name,
			&i.ProfilePicture,
			&i.IsVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newPost = `-- name: NewPost :one

INSERT INTO posts (
    id, user_id, username, content, media, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id
`

type NewPostParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	Username  string
	Content   string
	Media     json.RawMessage
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) NewPost(ctx context.Context, arg NewPostParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, newPost,
		arg.ID,
		arg.UserID,
		arg.Username,
		arg.Content,
		arg.Media,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
